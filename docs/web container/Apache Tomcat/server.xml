<?xml version="1.0" encoding="UTF-8"?>

<!--Server 根元素，创建一个Server实例，子标签有 Listener、GlobalNamingResources、Service-->
<!--port：关闭服务器的监听端口； shutdown：关闭服务器的指令字符串-->
<Server port="8005" shutdown="SHUTDOWN">

  <!--定义监听器-->
  <!--日志输出服务器、操作系统、jvm版本信息-->
  <Listener className="org.apache.catalina.startup.VersionLoggerListener" />
  <!--加载（服务器启动）、销毁（服务器停止）APR，如果找不到APR库，则会输出日志，并不影响Tomcat启动-->
  <Listener className="org.apache.catalina.core.AprLifecycleListener" SSLEngine="on" />
  <!--避免JRE 内存溢出-->
  <Listener className="org.apache.catalina.core.JreMemoryLeakPreventionListener" />
  <!---加载（服务器启动）、销毁（服务器停止） 全局命名服务-->
  <Listener className="org.apache.catalina.mbeans.GlobalResourcesLifecycleListener" />
  <!-- 在Context停止时重建Executor池中的线程，避免ThreadLocal相关的内存泄露 -->
  <Listener className="org.apache.catalina.core.ThreadLocalLeakPreventionListener" />

  <!--定义服务器的全局JNDI资源 -->
  <GlobalNamingResources> 
    <Resource name="UserDatabase" auth="Container"
              type="org.apache.catalina.UserDatabase"
              description="User database that can be updated and saved"
              factory="org.apache.catalina.users.MemoryUserDatabaseFactory"
              pathname="conf/tomcat-users.xml" /> 
  </GlobalNamingResources>

  <!--定义一个Service服务，一个Server标签可以有多个Service服务实例 -->
  <!-- 该标签用于创建 Service 实例，默认使用 org.apache.catalina.core.StandardService。 默认情况下，Tomcat 仅指定了Service 的名称， 值为 "Catalina"。 -->
  <!-- Service 子标签为 : Listener、Executor、Connector、Engine， -->
  <!-- Listener 用于为Service添加生命周期监听器， -->
  <!-- Executor 用于配置Service 共享线程池， -->
  <!-- Connector 用于配置Service 包含的链接器， -->
  <!-- Engine 用于配置Service中链接器对应的Servlet 容器引擎 -->
  <Service name="Catalina">

    <!--定义共享线程池，默认情况下service未添加共享线程池配置，因为service下可以定义多个connector（连接器），
    每一个连接都会存在一个线程，所以共享线程池是提供给connector使用-->
    <!-- name:线程池名称，用于 Connector中指定 -->
    <!-- namePrefix:所创建的每个线程的名称前缀，一个单独的线程名称为 namePrefix+threadNumber -->
    <!-- maxThreads:池中最大线程数 -->
    <!-- minSpareThreads:活跃线程数，也就是核心池线程数，这些线程不会被销毁，会一直存在 -->
    <!-- maxIdleTime:线程空闲时间，超过该时间后，空闲线程会被销毁，默认值为6000(1分钟)，单位毫秒 -->
    <!-- maxQueueSize:在被执行前最大线程排队数目，默认为Int的最大值，也就是广义的无限。除非特殊情况，这个值不需要更改，否则会有请求不会被处理的情况发生 -->
    <!-- prestartminSpareThreads:启动线程池时是否启动 minSpareThreads部分线程。默认值为false，即不启动  -->
    <!-- threadPriority:线程池中线程优先级，默认值为5，值从1到10  -->
    <!-- className:线程池实现类，未指定情况下，默认实现类为org.apache.catalina.core.StandardThreadExecutor。如果想使用自定义线程池首先需要实现 org.apache.catalina.Executor接口-->
    <Executor name="commonThreadPool" namePrefix="thread-exec-" maxThreads="200" minSpareThreads="100"
        maxIdleTime="6000" maxQueueSize="Integer.MAX_VALUE" prestartminSpareThreads="false" threadPriority="5"
        className="org.apache.catalina.core.StandardThreadExecutor"/>
 
    <!-- Connector 标签用于创建链接器实例 -->
    <!-- port: 端口号，Connector 用于创建服务端Socket 并进行监听， 以等待客户端请求链接。如果该属性设置 为0,Tomcat将会随机选择一个可用的端口号给当前Connector 使用 -->
    <!-- protocol:当前Connector 支持的访问协议。 默认为 HTTP/1.1 ， 并采用自动切换机制选择一个基于 JAVA NIO 的链接器或者基于本地APR的链接器(根据本地是否含有Tomcat的本地库判定)  -->
    <!-- connectionTimeOut:Connector 接收链接后的等待超时时间， 单位为 毫秒。 -1 表示不超时。  -->
    <!-- redirectPort:当前Connector 不支持SSL请求， 接收到了一个请求， 并且也符合security-constraint 约束， 需要SSL传输，Catalina自动将请求重定向到指定的端口。 -->
    <!-- executor:指定共享线程池的名称， 也可以通过maxThreads、minSpareThreads 等属性配置内部线程池。 -->
    <!-- URIEncoding:用于指定编码URI的字符编码， Tomcat8.x版本默认的编码为 UTF-8 , Tomcat7.x版本默认为ISO-8859-1-->
    <!-- maxConnections 最大支持的请求，一般需要与maxThreads保持一致 -->
    <Connector port="8080" protocol="HTTP/1.1" executor="commonThreadPool" maxThreads="1000" minSpareThreads="100" acceptCount="1000"
              maxConnections="1000" connectionTimeout="20000" compression="on" compressionMinSize="2048" disableUploadTimeout="true"
              redirectPort="8443" URIEncoding="UTF-8" />
    <Connector port="8009" protocol="AJP/1.3" redirectPort="8443" />


    <!-- Engine 表示 Servlet 引擎 -->
    <!-- name: 用于指定Engine 的名称， 默认为Catalina -->
    <!-- defaultHost:默认使用的虚拟主机名称，当客户端请求指向的主机无效时，将交由默认的虚拟主机处理，默认为localhost -->
    <Engine name="Catalina" defaultHost="localhost">
     
      <Realm className="org.apache.catalina.realm.LockOutRealm">
      
        <Realm className="org.apache.catalina.realm.UserDatabaseRealm" resourceName="UserDatabase"/>
      </Realm>

      <!-- Host 标签用于配置一个虚拟主机 -->
      <!-- name：主机地址 -->
      <!-- appBase：对应的项目地址 -->
      <!-- unpackWARs：自动解压war包 -->
      <!-- autoDeploy：自动部署 -->
      <Host name="localhost"  appBase="webapps" unpackWARs="true" autoDeploy="true">

        <!-- 阀，日志记录 -->
        <Valve className="org.apache.catalina.valves.AccessLogValve" directory="logs"
               prefix="localhost_access_log" suffix=".txt" pattern="%h %l %u %t &quot;%r&quot; %s %b" />
      </Host>


      <!-- 自定义host -->
      <Host name="www.elgchat.com"  appBase="webapps" unpackWARs="true" autoDeploy="true">

          <!--Context 标签用于配置一个Web应用-->
          <!-- docBase:Web应用目录或者War包的部署路径。可以是绝对路径，也可以是相对于 Host appBase的 相对路径。 -->
          <!-- path:Web应用的Context 路径。如果我们Host名为localhost， 则该web应用访问的根路径为: http://localhost:8080/web_demo。 -->
          <Context docBase="/Users/Jani/demo" path="/demo"></Context>

          <!-- 阀，日志记录 -->
        <Valve className="org.apache.catalina.valves.AccessLogValve" directory="logs"
               prefix="localhost_access_log" suffix=".txt" pattern="%h %l %u %t &quot;%r&quot; %s %b" />
      </Host>
    </Engine>
  </Service>
</Server>
